// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: v1/access_rule_service.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccessRuleService_ListAccessRules_FullMethodName  = "/larec.AccessRuleService/ListAccessRules"
	AccessRuleService_GetAccessRule_FullMethodName    = "/larec.AccessRuleService/GetAccessRule"
	AccessRuleService_CreateAccessRule_FullMethodName = "/larec.AccessRuleService/CreateAccessRule"
	AccessRuleService_UpdateAccessRule_FullMethodName = "/larec.AccessRuleService/UpdateAccessRule"
	AccessRuleService_DeleteAccessRule_FullMethodName = "/larec.AccessRuleService/DeleteAccessRule"
)

// AccessRuleServiceClient is the client API for AccessRuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessRuleServiceClient interface {
	ListAccessRules(ctx context.Context, in *ListAccessRulesRequest, opts ...grpc.CallOption) (*ListAccessRulesResponse, error)
	GetAccessRule(ctx context.Context, in *GetAccessRuleRequest, opts ...grpc.CallOption) (*AccessRule, error)
	CreateAccessRule(ctx context.Context, in *CreateAccessRuleRequest, opts ...grpc.CallOption) (*AccessRule, error)
	UpdateAccessRule(ctx context.Context, in *UpdateAccessRuleRequest, opts ...grpc.CallOption) (*AccessRule, error)
	DeleteAccessRule(ctx context.Context, in *DeleteAccessRuleRequest, opts ...grpc.CallOption) (*DeleteAccessRuleResponse, error)
}

type accessRuleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessRuleServiceClient(cc grpc.ClientConnInterface) AccessRuleServiceClient {
	return &accessRuleServiceClient{cc}
}

func (c *accessRuleServiceClient) ListAccessRules(ctx context.Context, in *ListAccessRulesRequest, opts ...grpc.CallOption) (*ListAccessRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessRulesResponse)
	err := c.cc.Invoke(ctx, AccessRuleService_ListAccessRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessRuleServiceClient) GetAccessRule(ctx context.Context, in *GetAccessRuleRequest, opts ...grpc.CallOption) (*AccessRule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessRule)
	err := c.cc.Invoke(ctx, AccessRuleService_GetAccessRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessRuleServiceClient) CreateAccessRule(ctx context.Context, in *CreateAccessRuleRequest, opts ...grpc.CallOption) (*AccessRule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessRule)
	err := c.cc.Invoke(ctx, AccessRuleService_CreateAccessRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessRuleServiceClient) UpdateAccessRule(ctx context.Context, in *UpdateAccessRuleRequest, opts ...grpc.CallOption) (*AccessRule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessRule)
	err := c.cc.Invoke(ctx, AccessRuleService_UpdateAccessRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessRuleServiceClient) DeleteAccessRule(ctx context.Context, in *DeleteAccessRuleRequest, opts ...grpc.CallOption) (*DeleteAccessRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccessRuleResponse)
	err := c.cc.Invoke(ctx, AccessRuleService_DeleteAccessRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessRuleServiceServer is the server API for AccessRuleService service.
// All implementations must embed UnimplementedAccessRuleServiceServer
// for forward compatibility.
type AccessRuleServiceServer interface {
	ListAccessRules(context.Context, *ListAccessRulesRequest) (*ListAccessRulesResponse, error)
	GetAccessRule(context.Context, *GetAccessRuleRequest) (*AccessRule, error)
	CreateAccessRule(context.Context, *CreateAccessRuleRequest) (*AccessRule, error)
	UpdateAccessRule(context.Context, *UpdateAccessRuleRequest) (*AccessRule, error)
	DeleteAccessRule(context.Context, *DeleteAccessRuleRequest) (*DeleteAccessRuleResponse, error)
	mustEmbedUnimplementedAccessRuleServiceServer()
}

// UnimplementedAccessRuleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccessRuleServiceServer struct{}

func (UnimplementedAccessRuleServiceServer) ListAccessRules(context.Context, *ListAccessRulesRequest) (*ListAccessRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessRules not implemented")
}
func (UnimplementedAccessRuleServiceServer) GetAccessRule(context.Context, *GetAccessRuleRequest) (*AccessRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessRule not implemented")
}
func (UnimplementedAccessRuleServiceServer) CreateAccessRule(context.Context, *CreateAccessRuleRequest) (*AccessRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessRule not implemented")
}
func (UnimplementedAccessRuleServiceServer) UpdateAccessRule(context.Context, *UpdateAccessRuleRequest) (*AccessRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessRule not implemented")
}
func (UnimplementedAccessRuleServiceServer) DeleteAccessRule(context.Context, *DeleteAccessRuleRequest) (*DeleteAccessRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccessRule not implemented")
}
func (UnimplementedAccessRuleServiceServer) mustEmbedUnimplementedAccessRuleServiceServer() {}
func (UnimplementedAccessRuleServiceServer) testEmbeddedByValue()                           {}

// UnsafeAccessRuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessRuleServiceServer will
// result in compilation errors.
type UnsafeAccessRuleServiceServer interface {
	mustEmbedUnimplementedAccessRuleServiceServer()
}

func RegisterAccessRuleServiceServer(s grpc.ServiceRegistrar, srv AccessRuleServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccessRuleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccessRuleService_ServiceDesc, srv)
}

func _AccessRuleService_ListAccessRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessRuleServiceServer).ListAccessRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessRuleService_ListAccessRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessRuleServiceServer).ListAccessRules(ctx, req.(*ListAccessRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessRuleService_GetAccessRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessRuleServiceServer).GetAccessRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessRuleService_GetAccessRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessRuleServiceServer).GetAccessRule(ctx, req.(*GetAccessRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessRuleService_CreateAccessRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessRuleServiceServer).CreateAccessRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessRuleService_CreateAccessRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessRuleServiceServer).CreateAccessRule(ctx, req.(*CreateAccessRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessRuleService_UpdateAccessRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccessRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessRuleServiceServer).UpdateAccessRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessRuleService_UpdateAccessRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessRuleServiceServer).UpdateAccessRule(ctx, req.(*UpdateAccessRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessRuleService_DeleteAccessRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessRuleServiceServer).DeleteAccessRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessRuleService_DeleteAccessRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessRuleServiceServer).DeleteAccessRule(ctx, req.(*DeleteAccessRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessRuleService_ServiceDesc is the grpc.ServiceDesc for AccessRuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessRuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "larec.AccessRuleService",
	HandlerType: (*AccessRuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAccessRules",
			Handler:    _AccessRuleService_ListAccessRules_Handler,
		},
		{
			MethodName: "GetAccessRule",
			Handler:    _AccessRuleService_GetAccessRule_Handler,
		},
		{
			MethodName: "CreateAccessRule",
			Handler:    _AccessRuleService_CreateAccessRule_Handler,
		},
		{
			MethodName: "UpdateAccessRule",
			Handler:    _AccessRuleService_UpdateAccessRule_Handler,
		},
		{
			MethodName: "DeleteAccessRule",
			Handler:    _AccessRuleService_DeleteAccessRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/access_rule_service.proto",
}

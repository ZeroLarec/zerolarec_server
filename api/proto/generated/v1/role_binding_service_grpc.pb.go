// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: v1/role_binding_service.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoleBindingService_ListRoleBindings_FullMethodName  = "/larec.RoleBindingService/ListRoleBindings"
	RoleBindingService_GetRoleBinding_FullMethodName    = "/larec.RoleBindingService/GetRoleBinding"
	RoleBindingService_AddRoleBinding_FullMethodName    = "/larec.RoleBindingService/AddRoleBinding"
	RoleBindingService_DeleteRoleBinding_FullMethodName = "/larec.RoleBindingService/DeleteRoleBinding"
)

// RoleBindingServiceClient is the client API for RoleBindingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleBindingServiceClient interface {
	ListRoleBindings(ctx context.Context, in *ListRoleBindingsRequest, opts ...grpc.CallOption) (*ListRoleBindingsResponce, error)
	GetRoleBinding(ctx context.Context, in *GetRoleBindingRequest, opts ...grpc.CallOption) (*RoleBinding, error)
	AddRoleBinding(ctx context.Context, in *AddRoleBindingRequest, opts ...grpc.CallOption) (*RoleBinding, error)
	DeleteRoleBinding(ctx context.Context, in *DeleteRoleBindingRequest, opts ...grpc.CallOption) (*DeleteRoleBindingResponce, error)
}

type roleBindingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleBindingServiceClient(cc grpc.ClientConnInterface) RoleBindingServiceClient {
	return &roleBindingServiceClient{cc}
}

func (c *roleBindingServiceClient) ListRoleBindings(ctx context.Context, in *ListRoleBindingsRequest, opts ...grpc.CallOption) (*ListRoleBindingsResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoleBindingsResponce)
	err := c.cc.Invoke(ctx, RoleBindingService_ListRoleBindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleBindingServiceClient) GetRoleBinding(ctx context.Context, in *GetRoleBindingRequest, opts ...grpc.CallOption) (*RoleBinding, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleBinding)
	err := c.cc.Invoke(ctx, RoleBindingService_GetRoleBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleBindingServiceClient) AddRoleBinding(ctx context.Context, in *AddRoleBindingRequest, opts ...grpc.CallOption) (*RoleBinding, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleBinding)
	err := c.cc.Invoke(ctx, RoleBindingService_AddRoleBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleBindingServiceClient) DeleteRoleBinding(ctx context.Context, in *DeleteRoleBindingRequest, opts ...grpc.CallOption) (*DeleteRoleBindingResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoleBindingResponce)
	err := c.cc.Invoke(ctx, RoleBindingService_DeleteRoleBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleBindingServiceServer is the server API for RoleBindingService service.
// All implementations must embed UnimplementedRoleBindingServiceServer
// for forward compatibility.
type RoleBindingServiceServer interface {
	ListRoleBindings(context.Context, *ListRoleBindingsRequest) (*ListRoleBindingsResponce, error)
	GetRoleBinding(context.Context, *GetRoleBindingRequest) (*RoleBinding, error)
	AddRoleBinding(context.Context, *AddRoleBindingRequest) (*RoleBinding, error)
	DeleteRoleBinding(context.Context, *DeleteRoleBindingRequest) (*DeleteRoleBindingResponce, error)
	mustEmbedUnimplementedRoleBindingServiceServer()
}

// UnimplementedRoleBindingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoleBindingServiceServer struct{}

func (UnimplementedRoleBindingServiceServer) ListRoleBindings(context.Context, *ListRoleBindingsRequest) (*ListRoleBindingsResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleBindings not implemented")
}
func (UnimplementedRoleBindingServiceServer) GetRoleBinding(context.Context, *GetRoleBindingRequest) (*RoleBinding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleBinding not implemented")
}
func (UnimplementedRoleBindingServiceServer) AddRoleBinding(context.Context, *AddRoleBindingRequest) (*RoleBinding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleBinding not implemented")
}
func (UnimplementedRoleBindingServiceServer) DeleteRoleBinding(context.Context, *DeleteRoleBindingRequest) (*DeleteRoleBindingResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleBinding not implemented")
}
func (UnimplementedRoleBindingServiceServer) mustEmbedUnimplementedRoleBindingServiceServer() {}
func (UnimplementedRoleBindingServiceServer) testEmbeddedByValue()                            {}

// UnsafeRoleBindingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleBindingServiceServer will
// result in compilation errors.
type UnsafeRoleBindingServiceServer interface {
	mustEmbedUnimplementedRoleBindingServiceServer()
}

func RegisterRoleBindingServiceServer(s grpc.ServiceRegistrar, srv RoleBindingServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoleBindingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoleBindingService_ServiceDesc, srv)
}

func _RoleBindingService_ListRoleBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleBindingServiceServer).ListRoleBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleBindingService_ListRoleBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleBindingServiceServer).ListRoleBindings(ctx, req.(*ListRoleBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleBindingService_GetRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleBindingServiceServer).GetRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleBindingService_GetRoleBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleBindingServiceServer).GetRoleBinding(ctx, req.(*GetRoleBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleBindingService_AddRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleBindingServiceServer).AddRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleBindingService_AddRoleBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleBindingServiceServer).AddRoleBinding(ctx, req.(*AddRoleBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleBindingService_DeleteRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleBindingServiceServer).DeleteRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleBindingService_DeleteRoleBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleBindingServiceServer).DeleteRoleBinding(ctx, req.(*DeleteRoleBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleBindingService_ServiceDesc is the grpc.ServiceDesc for RoleBindingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleBindingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "larec.RoleBindingService",
	HandlerType: (*RoleBindingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRoleBindings",
			Handler:    _RoleBindingService_ListRoleBindings_Handler,
		},
		{
			MethodName: "GetRoleBinding",
			Handler:    _RoleBindingService_GetRoleBinding_Handler,
		},
		{
			MethodName: "AddRoleBinding",
			Handler:    _RoleBindingService_AddRoleBinding_Handler,
		},
		{
			MethodName: "DeleteRoleBinding",
			Handler:    _RoleBindingService_DeleteRoleBinding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/role_binding_service.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: v1/vault_service.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VaultService_ListVaults_FullMethodName           = "/larec.VaultService/ListVaults"
	VaultService_GetVault_FullMethodName             = "/larec.VaultService/GetVault"
	VaultService_CreateVault_FullMethodName          = "/larec.VaultService/CreateVault"
	VaultService_UpdateVault_FullMethodName          = "/larec.VaultService/UpdateVault"
	VaultService_DeleteVault_FullMethodName          = "/larec.VaultService/DeleteVault"
	VaultService_ListVaultMembers_FullMethodName     = "/larec.VaultService/ListVaultMembers"
	VaultService_AddMember_FullMethodName            = "/larec.VaultService/AddMember"
	VaultService_RemoveMember_FullMethodName         = "/larec.VaultService/RemoveMember"
	VaultService_GetVaultKeyProtected_FullMethodName = "/larec.VaultService/GetVaultKeyProtected"
)

// VaultServiceClient is the client API for VaultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VaultServiceClient interface {
	ListVaults(ctx context.Context, in *ListVaultsRequest, opts ...grpc.CallOption) (*ListVaultsResponse, error)
	GetVault(ctx context.Context, in *GetVaultRequest, opts ...grpc.CallOption) (*Vault, error)
	CreateVault(ctx context.Context, in *CreateVaultRequest, opts ...grpc.CallOption) (*Vault, error)
	UpdateVault(ctx context.Context, in *UpdateVaultRequest, opts ...grpc.CallOption) (*Vault, error)
	DeleteVault(ctx context.Context, in *DeleteVaultRequest, opts ...grpc.CallOption) (*DeleteVaultResponse, error)
	ListVaultMembers(ctx context.Context, in *ListVaultMembersRequest, opts ...grpc.CallOption) (*ListVaultMembersResponse, error)
	AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*AddMemberResponse, error)
	RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error)
	GetVaultKeyProtected(ctx context.Context, in *GetVaultKeyProtectedRequest, opts ...grpc.CallOption) (*GetVaultKeyProtectedResponse, error)
}

type vaultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVaultServiceClient(cc grpc.ClientConnInterface) VaultServiceClient {
	return &vaultServiceClient{cc}
}

func (c *vaultServiceClient) ListVaults(ctx context.Context, in *ListVaultsRequest, opts ...grpc.CallOption) (*ListVaultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVaultsResponse)
	err := c.cc.Invoke(ctx, VaultService_ListVaults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) GetVault(ctx context.Context, in *GetVaultRequest, opts ...grpc.CallOption) (*Vault, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vault)
	err := c.cc.Invoke(ctx, VaultService_GetVault_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) CreateVault(ctx context.Context, in *CreateVaultRequest, opts ...grpc.CallOption) (*Vault, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vault)
	err := c.cc.Invoke(ctx, VaultService_CreateVault_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) UpdateVault(ctx context.Context, in *UpdateVaultRequest, opts ...grpc.CallOption) (*Vault, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vault)
	err := c.cc.Invoke(ctx, VaultService_UpdateVault_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) DeleteVault(ctx context.Context, in *DeleteVaultRequest, opts ...grpc.CallOption) (*DeleteVaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVaultResponse)
	err := c.cc.Invoke(ctx, VaultService_DeleteVault_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) ListVaultMembers(ctx context.Context, in *ListVaultMembersRequest, opts ...grpc.CallOption) (*ListVaultMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVaultMembersResponse)
	err := c.cc.Invoke(ctx, VaultService_ListVaultMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*AddMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMemberResponse)
	err := c.cc.Invoke(ctx, VaultService_AddMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveMemberResponse)
	err := c.cc.Invoke(ctx, VaultService_RemoveMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) GetVaultKeyProtected(ctx context.Context, in *GetVaultKeyProtectedRequest, opts ...grpc.CallOption) (*GetVaultKeyProtectedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVaultKeyProtectedResponse)
	err := c.cc.Invoke(ctx, VaultService_GetVaultKeyProtected_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VaultServiceServer is the server API for VaultService service.
// All implementations must embed UnimplementedVaultServiceServer
// for forward compatibility.
type VaultServiceServer interface {
	ListVaults(context.Context, *ListVaultsRequest) (*ListVaultsResponse, error)
	GetVault(context.Context, *GetVaultRequest) (*Vault, error)
	CreateVault(context.Context, *CreateVaultRequest) (*Vault, error)
	UpdateVault(context.Context, *UpdateVaultRequest) (*Vault, error)
	DeleteVault(context.Context, *DeleteVaultRequest) (*DeleteVaultResponse, error)
	ListVaultMembers(context.Context, *ListVaultMembersRequest) (*ListVaultMembersResponse, error)
	AddMember(context.Context, *AddMemberRequest) (*AddMemberResponse, error)
	RemoveMember(context.Context, *RemoveMemberRequest) (*RemoveMemberResponse, error)
	GetVaultKeyProtected(context.Context, *GetVaultKeyProtectedRequest) (*GetVaultKeyProtectedResponse, error)
	mustEmbedUnimplementedVaultServiceServer()
}

// UnimplementedVaultServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVaultServiceServer struct{}

func (UnimplementedVaultServiceServer) ListVaults(context.Context, *ListVaultsRequest) (*ListVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVaults not implemented")
}
func (UnimplementedVaultServiceServer) GetVault(context.Context, *GetVaultRequest) (*Vault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVault not implemented")
}
func (UnimplementedVaultServiceServer) CreateVault(context.Context, *CreateVaultRequest) (*Vault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVault not implemented")
}
func (UnimplementedVaultServiceServer) UpdateVault(context.Context, *UpdateVaultRequest) (*Vault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVault not implemented")
}
func (UnimplementedVaultServiceServer) DeleteVault(context.Context, *DeleteVaultRequest) (*DeleteVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVault not implemented")
}
func (UnimplementedVaultServiceServer) ListVaultMembers(context.Context, *ListVaultMembersRequest) (*ListVaultMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVaultMembers not implemented")
}
func (UnimplementedVaultServiceServer) AddMember(context.Context, *AddMemberRequest) (*AddMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedVaultServiceServer) RemoveMember(context.Context, *RemoveMemberRequest) (*RemoveMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (UnimplementedVaultServiceServer) GetVaultKeyProtected(context.Context, *GetVaultKeyProtectedRequest) (*GetVaultKeyProtectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVaultKeyProtected not implemented")
}
func (UnimplementedVaultServiceServer) mustEmbedUnimplementedVaultServiceServer() {}
func (UnimplementedVaultServiceServer) testEmbeddedByValue()                      {}

// UnsafeVaultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VaultServiceServer will
// result in compilation errors.
type UnsafeVaultServiceServer interface {
	mustEmbedUnimplementedVaultServiceServer()
}

func RegisterVaultServiceServer(s grpc.ServiceRegistrar, srv VaultServiceServer) {
	// If the following call pancis, it indicates UnimplementedVaultServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VaultService_ServiceDesc, srv)
}

func _VaultService_ListVaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).ListVaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_ListVaults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).ListVaults(ctx, req.(*ListVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_GetVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).GetVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_GetVault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).GetVault(ctx, req.(*GetVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_CreateVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).CreateVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_CreateVault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).CreateVault(ctx, req.(*CreateVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_UpdateVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).UpdateVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_UpdateVault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).UpdateVault(ctx, req.(*UpdateVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_DeleteVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).DeleteVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_DeleteVault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).DeleteVault(ctx, req.(*DeleteVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_ListVaultMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVaultMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).ListVaultMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_ListVaultMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).ListVaultMembers(ctx, req.(*ListVaultMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_AddMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).AddMember(ctx, req.(*AddMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_RemoveMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).RemoveMember(ctx, req.(*RemoveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_GetVaultKeyProtected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVaultKeyProtectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).GetVaultKeyProtected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_GetVaultKeyProtected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).GetVaultKeyProtected(ctx, req.(*GetVaultKeyProtectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VaultService_ServiceDesc is the grpc.ServiceDesc for VaultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VaultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "larec.VaultService",
	HandlerType: (*VaultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVaults",
			Handler:    _VaultService_ListVaults_Handler,
		},
		{
			MethodName: "GetVault",
			Handler:    _VaultService_GetVault_Handler,
		},
		{
			MethodName: "CreateVault",
			Handler:    _VaultService_CreateVault_Handler,
		},
		{
			MethodName: "UpdateVault",
			Handler:    _VaultService_UpdateVault_Handler,
		},
		{
			MethodName: "DeleteVault",
			Handler:    _VaultService_DeleteVault_Handler,
		},
		{
			MethodName: "ListVaultMembers",
			Handler:    _VaultService_ListVaultMembers_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _VaultService_AddMember_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _VaultService_RemoveMember_Handler,
		},
		{
			MethodName: "GetVaultKeyProtected",
			Handler:    _VaultService_GetVaultKeyProtected_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/vault_service.proto",
}

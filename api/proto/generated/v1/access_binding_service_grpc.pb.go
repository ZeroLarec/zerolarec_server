// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: v1/access_binding_service.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccessBindingService_ListAccessBindings_FullMethodName  = "/larec.AccessBindingService/ListAccessBindings"
	AccessBindingService_GetAccessBinding_FullMethodName    = "/larec.AccessBindingService/GetAccessBinding"
	AccessBindingService_AddAccessBinding_FullMethodName    = "/larec.AccessBindingService/AddAccessBinding"
	AccessBindingService_DeleteAccessBinding_FullMethodName = "/larec.AccessBindingService/DeleteAccessBinding"
)

// AccessBindingServiceClient is the client API for AccessBindingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessBindingServiceClient interface {
	ListAccessBindings(ctx context.Context, in *ListAccessBindingsRequest, opts ...grpc.CallOption) (*ListAccessBindingsResponce, error)
	GetAccessBinding(ctx context.Context, in *GetAccessBindingRequest, opts ...grpc.CallOption) (*AccessBinding, error)
	AddAccessBinding(ctx context.Context, in *AddAccessBindingRequest, opts ...grpc.CallOption) (*AccessBinding, error)
	DeleteAccessBinding(ctx context.Context, in *DeleteAccessBindingRequest, opts ...grpc.CallOption) (*DeleteAccessBindingResponce, error)
}

type accessBindingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessBindingServiceClient(cc grpc.ClientConnInterface) AccessBindingServiceClient {
	return &accessBindingServiceClient{cc}
}

func (c *accessBindingServiceClient) ListAccessBindings(ctx context.Context, in *ListAccessBindingsRequest, opts ...grpc.CallOption) (*ListAccessBindingsResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessBindingsResponce)
	err := c.cc.Invoke(ctx, AccessBindingService_ListAccessBindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessBindingServiceClient) GetAccessBinding(ctx context.Context, in *GetAccessBindingRequest, opts ...grpc.CallOption) (*AccessBinding, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessBinding)
	err := c.cc.Invoke(ctx, AccessBindingService_GetAccessBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessBindingServiceClient) AddAccessBinding(ctx context.Context, in *AddAccessBindingRequest, opts ...grpc.CallOption) (*AccessBinding, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessBinding)
	err := c.cc.Invoke(ctx, AccessBindingService_AddAccessBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessBindingServiceClient) DeleteAccessBinding(ctx context.Context, in *DeleteAccessBindingRequest, opts ...grpc.CallOption) (*DeleteAccessBindingResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccessBindingResponce)
	err := c.cc.Invoke(ctx, AccessBindingService_DeleteAccessBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessBindingServiceServer is the server API for AccessBindingService service.
// All implementations must embed UnimplementedAccessBindingServiceServer
// for forward compatibility.
type AccessBindingServiceServer interface {
	ListAccessBindings(context.Context, *ListAccessBindingsRequest) (*ListAccessBindingsResponce, error)
	GetAccessBinding(context.Context, *GetAccessBindingRequest) (*AccessBinding, error)
	AddAccessBinding(context.Context, *AddAccessBindingRequest) (*AccessBinding, error)
	DeleteAccessBinding(context.Context, *DeleteAccessBindingRequest) (*DeleteAccessBindingResponce, error)
	mustEmbedUnimplementedAccessBindingServiceServer()
}

// UnimplementedAccessBindingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccessBindingServiceServer struct{}

func (UnimplementedAccessBindingServiceServer) ListAccessBindings(context.Context, *ListAccessBindingsRequest) (*ListAccessBindingsResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessBindings not implemented")
}
func (UnimplementedAccessBindingServiceServer) GetAccessBinding(context.Context, *GetAccessBindingRequest) (*AccessBinding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessBinding not implemented")
}
func (UnimplementedAccessBindingServiceServer) AddAccessBinding(context.Context, *AddAccessBindingRequest) (*AccessBinding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccessBinding not implemented")
}
func (UnimplementedAccessBindingServiceServer) DeleteAccessBinding(context.Context, *DeleteAccessBindingRequest) (*DeleteAccessBindingResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccessBinding not implemented")
}
func (UnimplementedAccessBindingServiceServer) mustEmbedUnimplementedAccessBindingServiceServer() {}
func (UnimplementedAccessBindingServiceServer) testEmbeddedByValue()                              {}

// UnsafeAccessBindingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessBindingServiceServer will
// result in compilation errors.
type UnsafeAccessBindingServiceServer interface {
	mustEmbedUnimplementedAccessBindingServiceServer()
}

func RegisterAccessBindingServiceServer(s grpc.ServiceRegistrar, srv AccessBindingServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccessBindingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccessBindingService_ServiceDesc, srv)
}

func _AccessBindingService_ListAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessBindingServiceServer).ListAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessBindingService_ListAccessBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessBindingServiceServer).ListAccessBindings(ctx, req.(*ListAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessBindingService_GetAccessBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessBindingServiceServer).GetAccessBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessBindingService_GetAccessBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessBindingServiceServer).GetAccessBinding(ctx, req.(*GetAccessBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessBindingService_AddAccessBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccessBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessBindingServiceServer).AddAccessBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessBindingService_AddAccessBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessBindingServiceServer).AddAccessBinding(ctx, req.(*AddAccessBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessBindingService_DeleteAccessBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessBindingServiceServer).DeleteAccessBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessBindingService_DeleteAccessBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessBindingServiceServer).DeleteAccessBinding(ctx, req.(*DeleteAccessBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessBindingService_ServiceDesc is the grpc.ServiceDesc for AccessBindingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessBindingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "larec.AccessBindingService",
	HandlerType: (*AccessBindingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAccessBindings",
			Handler:    _AccessBindingService_ListAccessBindings_Handler,
		},
		{
			MethodName: "GetAccessBinding",
			Handler:    _AccessBindingService_GetAccessBinding_Handler,
		},
		{
			MethodName: "AddAccessBinding",
			Handler:    _AccessBindingService_AddAccessBinding_Handler,
		},
		{
			MethodName: "DeleteAccessBinding",
			Handler:    _AccessBindingService_DeleteAccessBinding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/access_binding_service.proto",
}
